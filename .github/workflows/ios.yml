name: iOS Build & Release

on:
  pull_request:
    branches: [ main, dev ]
  push:
    branches: [ main, dev ]

permissions:
  contents: write

jobs:
  build:
    name: Build (PR)
    if: github.event_name == 'pull_request'
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          brew update
          brew install xcodegen || true

      - name: Show Xcode version
        run: xcodebuild -version

      - name: Build unsigned IPA
        run: |
          make

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: ActualAccounts-unsigned-PR
          path: |
            iOSApp/build/ActualAccounts-unsigned.ipa

  prerelease:
    name: Pre-Release (dev)
    if: github.event_name == 'push' && github.ref == 'refs/heads/dev'
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          brew update
          brew install xcodegen || true

      - name: Read versions from xcconfig
        id: versions
        run: |
          MV=$(sed -n 's/^MARKETING_VERSION = \(.*\)$/\1/p' iOSApp/Resources/Version.xcconfig | tr -d '\r' | tail -n1)
          # Use timestamp-based build number for dev builds
          BV=$(date +%Y%m%d%H%M)
          echo "marketing_version=$MV" >> $GITHUB_OUTPUT
          echo "build_number=$BV" >> $GITHUB_OUTPUT
          echo "bundle_id_dev=" >> $GITHUB_OUTPUT
          echo "display_name_dev=" >> $GITHUB_OUTPUT

      - name: Show versions
        run: |
          echo "MARKETING_VERSION=${{ steps.versions.outputs.marketing_version }}"
          echo "CURRENT_PROJECT_VERSION=${{ steps.versions.outputs.build_number }}"

      - name: Build unsigned IPA (dev flavor)
        run: |
          # Build with timestamp build number only; no bundle id or entitlements overrides
          make EXTRA_XCODEBUILD_FLAGS="CURRENT_PROJECT_VERSION=${{ steps.versions.outputs.build_number }}"

      - name: Create/Update prerelease
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.versions.outputs.marketing_version }}-dev-${{ github.run_number }}
          name: v${{ steps.versions.outputs.marketing_version }} (dev build ${{ github.run_number }})
          prerelease: true
          files: |
            iOSApp/build/ActualAccounts-unsigned.ipa
          generate_release_notes: true
          make_latest: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Cleanup older prereleases (keep latest 5)
        uses: actions/github-script@v7
        with:
          script: |
            const owner = context.repo.owner;
            const repo = context.repo.repo;
            const releases = await github.rest.repos.listReleases({ owner, repo, per_page: 100 });
            const devReleases = releases.data.filter(r => r.prerelease && r.tag_name.includes('-dev-'))
              .sort((a, b) => new Date(b.published_at || b.created_at) - new Date(a.published_at || a.created_at));
            const toDelete = devReleases.slice(5);
            for (const rel of toDelete) {
              try {
                await github.rest.repos.deleteRelease({ owner, repo, release_id: rel.id });
                await github.rest.git.deleteRef({ owner, repo, ref: `tags/${rel.tag_name}` });
                core.info(`Deleted old prerelease ${rel.tag_name}`);
              } catch (e) {
                core.warning(`Failed to delete ${rel.tag_name}: ${e.message}`);
              }
            }

  release:
    name: Release (main)
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install tools
        run: |
          brew update
          brew install xcodegen || true

      - name: Read versions from xcconfig
        id: versions
        run: |
          MV=$(sed -n 's/^MARKETING_VERSION = \(.*\)$/\1/p' iOSApp/Resources/Version.xcconfig | tr -d '\r' | tail -n1)
          # Use timestamp-based build number for stable releases
          BV=$(date +%Y%m%d%H%M)
          echo "marketing_version=$MV" >> $GITHUB_OUTPUT
          echo "build_number=$BV" >> $GITHUB_OUTPUT

      - name: Build unsigned IPA (stable)
        run: |
          # Override build number with timestamp
          make EXTRA_XCODEBUILD_FLAGS="CURRENT_PROJECT_VERSION=${{ steps.versions.outputs.build_number }}"

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous release tag
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            # First release, get all commits
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
          else
            # Get commits since previous release
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges ${PREV_TAG}..HEAD)
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create/Update release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.versions.outputs.marketing_version }}
          name: v${{ steps.versions.outputs.marketing_version }} (build ${{ steps.versions.outputs.build_number }})
          prerelease: false
          files: |
            iOSApp/build/ActualAccounts-unsigned.ipa
          body: |
            ## Changes in v${{ steps.versions.outputs.marketing_version }}
            
            ${{ steps.changelog.outputs.changelog }}
            
            ## Installation
            Download the unsigned IPA and sideload using AltStore, Sideloadly, or similar tools.
          make_latest: true
          fail_on_unmatched_files: true
          draft: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
